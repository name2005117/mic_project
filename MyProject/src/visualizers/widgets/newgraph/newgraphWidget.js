/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Dec 04 2019 20:29:17 GMT-0600 (GMT-06:00).
 */

define(['plotlyjs',
        'css!./styles/newgraphWidget.css']
    , function (Plotly) {
    'use strict';



    var WIDGET_CLASS = 'newgraph';




    // a blank canvas
    //var canvas = document.createElement("canvas");
    //canvas.style.cssText = 'position:absolute;top: 200px;left: 200px;opacity:0.5;background:#000;align: center';
    //canvas.width  = 600;
    //canvas.height = 250;

    // build a ploty graph
    var myDiv = document.createElement("myDiv");
    Plotly.plot( myDiv, [{
        x: [1, 2, 3, 4, 5],
        y: [1, 2, 4, 8, 16] }], {
        margin: { t: 0 } } );

    myDiv.style.cssText = 'position:relative;top: 10px;left: 120px;font-size: 40px;text-align: center';


    //document.body.appendChild(myDiv);

        // Static html element for demonstartion
    var arr = ["Mass.s","Mass.v","der(Mass.s)","der(Mass.v)","Mass.a","Mass.flange_a.s","Mass.flange_b.f","Mass.flange_b.s","Spring.f","Spring.s_rel","Fixed.flange.f","Mass.flange_a.f","Spring.flange_a.f","Spring.flange_b.f","Spring.flange_b.s","cool"];

    var selectList = document.createElement("select");
    selectList.id = "mySelect";


    for (var i = 0; i < arr.length; i++) {
        var option = document.createElement("option");
        option.value = arr[i];
        option.text = arr[i];

        selectList.add(option);
    }
    selectList.style.cssText = 'position:relative;top: 10px;left: 120px;font-size: 40px;text-align: center';

    // The button used to submit a properity to generate a graph
        var button = document.createElement("input");
        button.type = "button";
        button.value = "Generate a xy graph";
        button.style.cssText = 'position:relative;top: 10px;left: 150px;font-size: 40px;text-align: center';
        button.onclick = function () {
            // do something
        }

    // function createButton(contain){
    //     var button = document.createElement("input");
    //     button.type = "button";
    //     button.value = "Generate a xy graph";
    //     button.style.cssText = 'position:relative;top: 10px;left: 150px;font-size: 40px;text-align: center';
    //     button.onclick = function (contain) {
    //         // Do something
    //         var myDiv = document.createElement("myDiv");
    //         Plotly.plot( myDiv, [{
    //             x: [1, 2, 3, 4, 5],
    //             y: [1, 2, 4, 8, 16] }], {
    //             margin: { t: 0 } } );
    //
    //         contain.append(myDiv);
    //     };
    // }


    function newgraphWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    newgraphWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header
        this._el.append('<h3>Draw a Graph:</h3>');


        this._el.append(selectList);
        //this._el.append(createButton(this._el));
        this._el.append(button);
        // empty canvas
        //this._el.append(canvas);
        // graph
        this._el.append(myDiv);

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    newgraphWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    newgraphWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            // this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    newgraphWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    newgraphWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    newgraphWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };


    newgraphWidget.prototype.onBackgroundDblClick = function () {
        //this._el.append('<div>Background was double-clicked!!</div>');


        //this._el.append(canvas);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    newgraphWidget.prototype.destroy = function () {
    };

    newgraphWidget.prototype.onActivate = function () {
        this._logger.debug('newgraphWidget has been activated');
    };

    newgraphWidget.prototype.onDeactivate = function () {
        this._logger.debug('newgraphWidget has been deactivated');
    };

    return newgraphWidget;
});
