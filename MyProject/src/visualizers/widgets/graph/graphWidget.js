/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Dec 04 2019 16:44:42 GMT-0600 (GMT-06:00).
 */


define(['css!./styles/graphWidget.css'], function () {
    'use strict';

    var WIDGET_CLASS = 'graph';


    function graphWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    graphWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header
        this._el.append('<h3>graph Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    graphWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    graphWidget.prototype.setSpreadSheet = function (desc) {
        const self = this;
        $(this._el).empty();
        this._nodeIds2Names = {};
        this._sources = {};
        desc.nodes.forEach(function(node){
            self._nodeIds2Names[node.id] = node.name;
        });
        desc.edges.forEach(function(edge){
            console.log(edge.id);
            self._sources[edge.src] = self._sources[edge.src] || {};
            self._sources[edge.src][edge.dst] = edge.id;
        });
        console.log(self._sources);

        let myTable = document.createElement('table');
        let firstRow = document.createElement('tr');
        $(firstRow).append('<th><th/>');
        desc.nodes.forEach(function(node){
            $(firstRow).append('<th>'+node.name+'<th/>');
        });
        $(myTable).append(firstRow);

        desc.nodes.forEach(function(node){
            let currentRow = document.createElement('tr');
            $(currentRow).append('<th>'+node.name+'<th/>');
            desc.nodes.forEach(function(otherNode){
                if(otherNode.id === node.id){
                    $(currentRow).append('<th>X<th/>');
                    return;
                }
                let checked = false;
                let id = '';
                let checkedText = '';
                console.log('node:',node.id,' other:',otherNode.id);
                if( self._sources.hasOwnProperty(node.id) && self._sources[node.id].hasOwnProperty(otherNode.id)){
                    console.log('found one');
                    checked = true;
                    id = self._sources[node.id][otherNode.id];
                    checkedText = 'checked="true"';
                }

                let cell = document.createElement('th');
                let input = document.createElement('input');
                $(input).prop('type','checkbox');
                if(id){
                    $(input).prop('id',id);
                }
                if(checked){
                    $(input).prop('checked',true);
                    $(input).on('click',function(event){
                        event.stopPropagation();
                        event.preventDefault();
                        console.log('remove edge',this.id);
                        self.onRemoveEdge(this.id);
                    });
                } else {
                    $(input).data('src',node.id);
                    $(input).data('dst',otherNode.id);
                    $(input).on('click',function(){
                        console.log('create edge',$(this).data('src'),$(this).data('dst'));
                        self.onCreateEdge($(this).data('src'),$(this).data('dst'));
                    });
                }
                //$(cell).append('<input type="checkbox" '+id+' '+checkedText+'>');
                $(cell).append(input);
                $(currentRow).append(cell);
            });
            $(myTable).append(currentRow);
        });


        $(this._el).append(myTable);
    };


    // Adding/Removing/Updating items
    graphWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    graphWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    graphWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    graphWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    graphWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');

        var y = document.createElement("input");
        y.setAttribute("type", "checkbox");
        y.style.cssText = 'position:relative;top: 300px;left: 400px;border: 3px solid #73AD21;width:5%;height:5%;z-index:10; background:#000';
        document.body.appendChild(y);

        // var y2 = document.createElement("input2");
        // y2.setAttribute("type", "checkbox");
        // y2.style.cssText = 'position:relative;top: 450px;left: 600px;border: white;width:5%;height:5%;z-index:10; background:#000';
        // document.body.appendChild(y2);
        //
        // var y3 = document.createElement("input3");
        // y3.setAttribute("type", "checkbox");
        // y3.style.cssText = 'position:relative;top: 400px;left: 600px;border: 3px solid #73AD21;width:5%;height:5%;z-index:10; background:#000';
        // document.body.appendChild(y3);
        //
        // var y4 = document.createElement("input4");
        // y4.setAttribute("type", "checkbox");
        // y4.style.cssText = 'position:relative;top: 450px;left: 600px;border: 3px solid #73AD21;width:5%;height:5%;z-index:10; background:#000';
        // document.body.appendChild(y4);
        //
        //
        // var y5 = document.createElement("input5");
        // y5.setAttribute("type", "checkbox");
        // y5.style.cssText = 'position:relative;top: 500px;left: 600px;border: 3px solid #73AD21;width:5%;height:5%;z-index:10; background:#000';
        // document.body.appendChild(y5);
        //
        // var y6 = document.createElement("input6");
        // y6.setAttribute("type", "checkbox");
        // y6.style.cssText = 'position:relative;top: 550px;left: 600px;border: 3px solid #73AD21;width:5%;height:5%;z-index:10; background:#000';
        // document.body.appendChild(y6);




        //
        // var x = document.createElement("canvas");
        // x.style.cssText = 'position:relative;width:50%;height:50%;opacity:0.3;z-index:10;background:#000';
        // var ctx = x.getContext("2d");
        // ctx.beginPath();
        // ctx.moveTo(20, 20);
        // ctx.lineTo(20, 100);
        // ctx.lineTo(70, 100);
        // ctx.strokeStyle = "red";
        // ctx.stroke();
        // document.body.appendChild(x);

        // var elem = document.createElement('div');
        // elem.style.cssText = 'position:absolute;width:10%;height:10%;opacity:0.3;z-index:10;background:#000';
        // document.body.appendChild(elem);

    };



    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    graphWidget.prototype.destroy = function () {
    };

    graphWidget.prototype.onActivate = function () {
        this._logger.debug('graphWidget has been activated');
    };

    graphWidget.prototype.onDeactivate = function () {
        this._logger.debug('graphWidget has been deactivated');
    };

    return graphWidget;
});
